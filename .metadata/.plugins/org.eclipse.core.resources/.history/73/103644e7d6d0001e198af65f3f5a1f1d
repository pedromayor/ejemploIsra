package main;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilePermission;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.logging.*;

public class principal {
	
	static String usuarioLoggeado;
	
	static ArrayList<File> ficheros = new ArrayList<>();
	static ArrayList<String> ficherosNombre = new ArrayList<>();
	
	static String directorioOrigen =  "./src/directorioFicheros/";
	
	private static Logger logger = Logger.getLogger("Logger");

	
	public static void main(String[] args) {
		
		FilePermission filePerm = new java.io.FilePermission("/resources/files", "read");

	    ArrayList<String> usuarios = new ArrayList<>();
	    
	    usuarios.add("aaaabbbb");
	    usuarios.add("ccccdddd");
	    usuarios.add("eeeeffff");
	    
        Pattern pat 	= null;
        Matcher mat 	= null;
        String datos 	= null;
        
        
        logger.setLevel(Level.ALL);
        
        
		FileHandler fh;
		try {
			fh = new FileHandler("C:/datos/registroTAREA06_PSP.log", true);
			
			SimpleFormatter formatter = new SimpleFormatter();
			fh.setFormatter(formatter);
			
			logger.addHandler(fh);
			
			
		} catch (IOException e) {
			
			logger.log(Level.SEVERE,"No se puede acceder al fichero de logs.");

		}
	
		
	
        
        //Creamos un patter para 8 caracteres de la "a" a la "z" en minusculas.
        pat = Pattern.compile("^[a-z]{8}$");
        
	    Scanner sc = new Scanner(System.in);
	    
	    boolean exit = false;
	    do {
	    	
	    	System.out.println("Introduzca usuario");
	    	datos = sc.nextLine();
	    	
	    	mat = pat.matcher(datos);
	    	
	    	if(mat.find()) {
	    		
	    		if(!usuarios.contains(datos)) {
	    			
	    			logger.log(Level.WARNING,"El usuario no existe.");
	    		} else {
	    			usuarioLoggeado = datos;
	    			logger.log(Level.FINE,"Usuario: "+ datos + " Se ha loggeado.");
	    			exit = true;}
	    
	    	} else {
	    		logger.log(Level.WARNING,"El usuario no coincide con el patrón.");
	    		System.out.println();
	    	}
			
		} while (!exit);
	    
	    exit = false;
	    
	    do {
	    	//Creamos un patter de 1 a 8 caracteres de la "a" a la "z" minusculas, mayusculas y numero de 0 a 9.
	    	//Debe llevar un punto seguido de 3 caracteres, idem que antes.
	    	pat = Pattern.compile("^[a-zA-Z0-9]{1,8}\\.[a-zA-Z0-9]{3}$");
	    	
	    	System.out.println("Seleccione un fichero:");
	    	
	    	try {
	    		
				getFicheros();
				
				datos = sc.nextLine();
				mat = pat.matcher(datos);
		    	
		    	if(mat.find()) {
		    		
		    		if(!ficherosNombre.contains(datos)) {
		    			logger.log(Level.INFO,"El fichero introducido no existe: "+ datos);
		    		
		    		} else {
		    			logger.log(Level.FINE,"Se ha accedido al fichero: "+ datos);
		    			
		    			try {
		    				leerFichero(datos);
						} catch (Exception e) {
							logger.log(Level.SEVERE,"No se ha podido leer el fichero: "+ datos);
						}
		    			
		    			
		    			exit = true;}
		    
		    	} else {
		    		logger.log(Level.INFO,"El fichero introducido fichero no coincide con el patrón: "+ datos);
		    	}
			
	    
	    	} catch (IOException e) {
	    		logger.log(Level.SEVERE,"No se ha podido acceder al directorio: "+ directorioOrigen);
	    		
				exit = true;
			}
			
		} while (!exit);
	    
	    
	    logger.log(Level.FINE,"Se ha cerrado la sesión de: "+ usuarioLoggeado);
	    
	    sc.close();
	   

	}
	
	@SuppressWarnings("resource")
	private static void getFicheros() throws IOException {
		
		Stream<Path> miStream = Files.walk(Paths.get(directorioOrigen));
		List<Object> listaPaths = miStream.collect(Collectors.toList());
		
		//Recorremos la lista de archivo
		for (int i = 0; i < listaPaths.size(); i++) {
		    
			String rutaFichero = listaPaths.get(i).toString();
		    File fichero = new File(rutaFichero);
		    
		    if (fichero.isFile()) {
		    	System.out.println("Fichero: "+ fichero.getName());
		    	
		    	ficheros.add(fichero); 
		    	ficherosNombre.add(fichero.getName());
		    
		    }
		}

	};
	
	@SuppressWarnings("resource")
	private static void leerFichero(String nombre) throws IOException {

		for (File file : ficheros) {
			
			if(file.getName().equals(nombre)) {
				
				System.out.println("Imprimiendo fichero: "+ nombre);
				
				FileInputStream fis = new FileInputStream(file);
		        byte[] buffer = new byte[4096];
		        int bytesRead;
		        
		        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		        
		        while ((bytesRead = fis.read(buffer)) != -1) {
	
		        	byteArrayOutputStream.write(buffer, 0, bytesRead);
		        }
		       
		        String contenido = byteArrayOutputStream.toString();
		        System.out.println(contenido);
    		        
			}
		}
	}

}
